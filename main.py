import logging
from aiogram import Bot, Dispatcher, executor, types

API_TOKEN = "7501036534:AAGDignMN0t9T3nMTcx-hMzpCeZ-NSSriWY"
ADMIN_ID = 228168100
CHAT_ID = -1002630037123

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

crypto_buttons = [
    ("Bitcoin", "BTC"), ("Ethereum", "ETH"), ("Tether", "USDT"),
    ("BNB", "BNB"), ("Solana", "SOL"), ("XRP", "XRP"),
    ("Cardano", "ADA"), ("Dogecoin", "DOGE"), ("Toncoin", "TON"),
    ("Avalanche", "AVAX")
]

@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for name, code in crypto_buttons:
        keyboard.add(f"üí∞ {name}")
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –Ω–∏–∂–µ üëá", reply_markup=keyboard)

@dp.message_handler(lambda message: any(code in message.text for _, code in crypto_buttons))
async def crypto_info(message: types.Message):
    await message.reply(f"üîç –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ {message.text} –±—É–¥–µ—Ç –∑–¥–µ—Å—å... (–∑–∞–≥–ª—É—à–∫–∞)")

@dp.message_handler(commands=['ad'])
async def receive_ad(message: types.Message):
    if message.chat.type != 'private':
        return
    await message.answer("üì¢ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –º—ã –ø–µ—Ä–µ–¥–∞–¥–∏–º –µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

@dp.message_handler(lambda message: message.chat.type == 'private')
async def forward_ad(message: types.Message):
    if message.text.startswith("/"):
        return
    await bot.send_message(
        ADMIN_ID,
        f"üì¨ –ù–æ–≤–æ–µ —Ä–µ–∫–ª–∞–º–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:

–û—Ç @{message.from_user.username or '–ë–µ–∑ –Ω–∏–∫–∞'}

{message.text}",
        reply_markup=types.InlineKeyboardMarkup().add(
            types.InlineKeyboardButton("‚úÖ –†–∞–∑–º–µ—Å—Ç–∏—Ç—å", callback_data=f"approve_{message.chat.id}"),
            types.InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data="decline"),
            types.InlineKeyboardButton("‚úâÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_{message.from_user.id}")
        )
    )
    await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–¥–∞–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

@dp.callback_query_handler(lambda call: call.data.startswith("approve_"))
async def approve_ad(call: types.CallbackQuery):
    chat_id = int(call.data.split("_")[1])
    await bot.send_message(CHAT_ID, f"üì¢ –†–µ–∫–ª–∞–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∞:

{call.message.text}")
    await call.answer("–†–∞–∑–º–µ—â–µ–Ω–æ ‚úÖ")

@dp.callback_query_handler(lambda call: call.data.startswith("reply_"))
async def reply_to_user(call: types.CallbackQuery):
    user_id = int(call.data.split("_")[1])
    await call.message.answer(f"‚úèÔ∏è –ù–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (ID: {user_id})")
    dp.register_message_handler(lambda msg: send_direct_reply(msg, user_id), content_types=types.ContentTypes.TEXT, state="*")

async def send_direct_reply(message: types.Message, user_id: int):
    await bot.send_message(user_id, f"üì© –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {message.text}")
    await message.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
